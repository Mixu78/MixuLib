import groovy.util.ConfigSlurper

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

repositories {
    mavenCentral()
    maven {
        name 'ChickenBones Maven'
        url "http://chickenbones.net/maven/"
    }
}

ext.configFile = file "build.properties"

configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mcVersion + "-" + config.modVersion
group = config.modGroup
archivesBaseName = config.modBaseName

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

minecraft {
    version = config.forgeVersionFull
    runDir = "run"
    replace '@VERSION@', config.modVersion
    replaceIn "MixuLib.java"
    mappings = project.config.mcpVersion
    makeObfSourceJar = false
}

dependencies {
    compile "codechicken:CodeChickenLib:${config.mcVersion}-${config.cclVersion}:deobf"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives srcJar
    archives deobfJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            //should we publish to maven
            if (project.property("publish_build").equals("true") && project.hasProperty("maven_pass")) {
                println "publish here"
            } else {
                //publish to local instead
                println "Publishing to local maven, url "+mavenLocal().url.toString()
                mavenLocal()
            }
            pom {
                groupId = project.group
                // Force Maven upload to use the <mcversion>-<version> syntax.
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description 'MixuLib'
                    url 'https://github.com/Mixu78/MixuLib'

                    scm {
                        url 'https://github.com/Mixu78/MixuLib'
                        connection 'scm:git:git://github.com/Mixu78/MixuLib.git'
                        developerConnection 'scm:git:git@github.com:Mixu78/MixuLib.git'
                    }

                    issueManagement {
                        system 'github'
                        url 'https://github.com/Mixu78/MixuLib/issues'
                    }

                    licenses {
                        license {
                            name "GPLv3"
                            url 'https://github.com/Mixu78/MixuLib/blob/master/LICENSE.md'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'Mixu_78'
                            name 'Mixu_78'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}